#ifndef INSTRUCTIONS_H
#define INSTRUCTIONS_H
#include <map>
#include <vector>
#include <string>
#include <cstdint>

namespace ABC {
enum class Operand
{
    Byte,
    Int,
    U30,
    S24,
    Dynamic
};

enum OpCode
{
    OP_add                  = 0xA0,
    OP_add_d                = 0x9B,
    OP_add_i                = 0xC5,
    OP_add_p                = 0xB5,
    OP_alloc                = 0xF6,
    OP_applytype            = 0x53,
    OP_astype               = 0x86,
    OP_astypelate           = 0x87,
    OP_bitand               = 0xA8,
    OP_bitnot               = 0x97,
    OP_bitor                = 0xA9,
    OP_bitxor               = 0xAA,
    OP_bkpt                 = 0x01,
    OP_bkptline             = 0xF2,
    OP_call                 = 0x41,
    OP_callinterface        = 0x4D,
    OP_callmethod           = 0x43,
    OP_callproperty         = 0x46,
    OP_callproplex          = 0x4C,
    OP_callpropvoid         = 0x4F,
    OP_callstatic           = 0x44,
    OP_callsuper            = 0x45,
    OP_callsuperid          = 0x4B,
    OP_callsupervoid        = 0x4E,
    OP_checkfilter          = 0x78,
    OP_codegenop            = 0xFD,
    OP_coerce               = 0x80,
    OP_coerce_a             = 0x82,
    OP_coerce_b             = 0x81,
    OP_coerce_d             = 0x84,
    OP_coerce_i             = 0x83,
    OP_coerce_o             = 0x89,
    OP_coerce_s             = 0x85,
    OP_coerce_u             = 0x88,
    OP_concat               = 0x9A,
    OP_construct            = 0x42,
    OP_constructprop        = 0x4A,
    OP_constructsuper       = 0x49,
    OP_convert_b            = 0x76,
    OP_convert_d            = 0x75,
    OP_convert_f            = 0x79,
    OP_convert_f4           = 0x7B,
    OP_convert_i            = 0x73,
    OP_convert_m            = 0x79,
    OP_convert_m_p          = 0x7A,
    OP_convert_o            = 0x77,
    OP_convert_s            = 0x70,
    OP_convert_u            = 0x74,
    OP_debug                = 0xEF,
    OP_debugfile            = 0xF1,
    OP_debugline            = 0xF0,
    OP_declocal             = 0x94,
    OP_declocal_i           = 0xC3,
    OP_declocal_p           = 0x9F,
    OP_decode               = 0xFF,
    OP_decrement            = 0x93,
    OP_decrement_i          = 0xC1,
    OP_decrement_p          = 0x9E,
    OP_deldescendants       = 0x5B,
    OP_deleteproperty       = 0x6A,
    OP_deletepropertylate   = 0x6B,
    OP_divide               = 0xA3,
    OP_divide_p             = 0xB8,
    OP_doubletoatom         = 0xFB,
    OP_dup                  = 0x2A,
    OP_dxns                 = 0x06,
    OP_dxnslate             = 0x07,
    OP_equals               = 0xAB,
    OP_esc_xattr            = 0x72,
    OP_esc_xelem            = 0x71,
    OP_finddef              = 0x5F,
    OP_findproperty         = 0x5E,
    OP_findpropglobal       = 0x5C,
    OP_findpropstrict       = 0x5D,
    OP_getdescendants       = 0x59,
    OP_getglobalscope       = 0x64,
    OP_getglobalslot        = 0x6E,
    OP_getlex               = 0x60,
    OP_getlocal             = 0x62,
    OP_getlocal_0           = 0xD0,
    OP_getlocal_1           = 0xD1,
    OP_getlocal_2           = 0xD2,
    OP_getlocal_3           = 0xD3,
    OP_getouterscope        = 0x67,
    OP_getproperty          = 0x66,
    OP_getscopeobject       = 0x65,
    OP_getslot              = 0x6C,
    OP_getsuper             = 0x04,
    OP_greaterequals        = 0xB0,
    OP_greaterthan          = 0xAF,
    OP_hasnext              = 0x1F,
    OP_hasnext2             = 0x32,
    OP_ifeq                 = 0x13,
    OP_iffalse              = 0x12,
    OP_ifge                 = 0x18,
    OP_ifgt                 = 0x17,
    OP_ifle                 = 0x16,
    OP_iflt                 = 0x15,
    OP_ifne                 = 0x14,
    OP_ifnge                = 0x0F,
    OP_ifngt                = 0x0E,
    OP_ifnle                = 0x0D,
    OP_ifnlt                = 0x0C,
    OP_ifstricteq           = 0x19,
    OP_ifstrictne           = 0x1A,
    OP_iftrue               = 0x11,
    OP_in                   = 0xB4,
    OP_inclocal             = 0x92,
    OP_inclocal_i           = 0xC2,
    OP_inclocal_p           = 0x9D,
    OP_increment            = 0x91,
    OP_increment_i          = 0xC0,
    OP_increment_p          = 0x9C,
    OP_initproperty         = 0x68,
    OP_instanceof           = 0xB1,
    OP_invalid              = 0xED,
    OP_istype               = 0xB2,
    OP_istypelate           = 0xB3,
    OP_jump                 = 0x10,
    OP_kill                 = 0x08,
    OP_label                = 0x09,
    OP_lessequals           = 0xAE,
    OP_lessthan             = 0xAD,
    OP_lf32                 = 0x38,
    OP_lf32x4               = 0x0A,
    OP_lf64                 = 0x39,
    OP_li16                 = 0x36,
    OP_li32                 = 0x37,
    OP_li8                  = 0x35,
    OP_lookupswitch         = 0x1B,
    OP_lshift               = 0xA5,
    OP_mark                 = 0xF7,
    OP_modulo               = 0xA4,
    OP_modulo_p             = 0xB9,
    OP_multiply             = 0xA2,
    OP_multiply_i           = 0xC7,
    OP_multiply_p           = 0xB7,
    OP_negate               = 0x90,
    OP_negate_i             = 0xC4,
    OP_negate_p             = 0x8F,
    OP_newactivation        = 0x57,
    OP_newarray             = 0x56,
    OP_newcatch             = 0x5A,
    OP_newclass             = 0x58,
    OP_newfunction          = 0x40,
    OP_newobject            = 0x55,
    OP_nextname             = 0x1E,
    OP_nextvalue            = 0x23,
    OP_nop                  = 0x02,
    OP_not                  = 0x96,
    OP_pop                  = 0x29,
    OP_popscope             = 0x1D,
    OP_prologue             = 0xF9,
    OP_pushbyte             = 0x24,
    OP_pushconstant         = 0x22,
    OP_pushdecimal          = 0x33,
    OP_pushdnan             = 0x34,
    OP_pushdouble           = 0x2F,
    OP_pushfalse            = 0x27,
    OP_pushfloat            = 0x22,
    OP_pushfloat4           = 0x54,
    OP_pushint              = 0x2D,
    OP_pushnamespace        = 0x31,
    OP_pushnan              = 0x28,
    OP_pushnull             = 0x20,
    OP_pushscope            = 0x30,
    OP_pushshort            = 0x25,
    OP_pushstring           = 0x2C,
    OP_pushtrue             = 0x26,
    OP_pushuint             = 0x2E,
    OP_pushundefined        = 0x21,
    OP_pushwith             = 0x1C,
    OP_returnvalue          = 0x48,
    OP_returnvoid           = 0x47,
    OP_rshift               = 0xA6,
    OP_sendenter            = 0xFA,
    OP_setglobalslot        = 0x6F,
    OP_setlocal             = 0x63,
    OP_setlocal_0           = 0xD4,
    OP_setlocal_1           = 0xD5,
    OP_setlocal_2           = 0xD6,
    OP_setlocal_3           = 0xD7,
    OP_setproperty          = 0x61,
    OP_setpropertylate      = 0x69,
    OP_setslot              = 0x6D,
    OP_setsuper             = 0x05,
    OP_sf32                 = 0x3D,
    OP_sf32x4               = 0x0B,
    OP_sf64                 = 0x3E,
    OP_si16                 = 0x3B,
    OP_si32                 = 0x3C,
    OP_si8                  = 0x3A,
    OP_strictequals         = 0xAC,
    OP_subtract             = 0xA1,
    OP_subtract_i           = 0xC6,
    OP_subtract_p           = 0xB6,
    OP_swap                 = 0x2B,
    OP_sweep                = 0xFC,
    OP_sxi1                 = 0x50,
    OP_sxi16                = 0x52,
    OP_sxi8                 = 0x51,
    OP_throw                = 0x03,
    OP_timestamp            = 0xF3,
    OP_typeof               = 0x95,
    OP_unplus               = 0x7A,
    OP_urshift              = 0xA7,
    OP_verifyop             = 0xFE,
    OP_verifypass           = 0xF5,
    OP_wb                   = 0xF8,
    };

class Instruction
{
public:
    Instruction(const std::string &name, std::vector<Operand> operands = { }) 
        : operands(operands), name(name)
    {
    }

    Instruction() = default;

    std::vector<Operand> operands;

    uint32_t ip = 0;

    std::string name;
};



static std::map<uint8_t, Instruction> Instructions
{
    //{ 0xEE, { "abs_jump" } },
    { 0xA0, { "add" } },
    { 0x9B, { "add_d" } },
    { 0xC5, { "add_i" } },
    { 0xB5, { "add_p" } },
    { 0xF6, { "alloc" } },
    { 0x53, { "applytype", { Operand::U30 }  } },
    { 0x86, { "astype", { Operand::U30 } } },
    { 0x87, { "astypelate" } },
    { 0xA8, { "bitand" } },
    { 0x97, { "bitnot" } },
    { 0xA9, { "bitor" } },
    { 0xAA, { "bitxor" } },
    { 0x01, { "bkpt" } },
    { 0xF2, { "bkptline", { Operand::U30 } } },
    { 0x41, { "call", { Operand::U30 } } },
    { 0x4D, { "callinterface" } },
    { 0x43, { "callmethod", { Operand::U30 }  } },
    { 0x46, { "callproperty", { Operand::U30, Operand::U30  } } },
    { 0x4C, { "callproplex" , { Operand::U30, Operand::U30  }} },
    { 0x4F, { "callpropvoid", { Operand::U30, Operand::U30  } } },
    { 0x44, { "callstatic", { Operand::U30, Operand::U30  } } },
    { 0x45, { "callsuper", { Operand::U30, Operand::U30  } } },
    { 0x4B, { "callsuperid", { Operand::U30, Operand::U30  } } },
    { 0x4E, { "callsupervoid", { Operand::U30, Operand::U30  } } },
    { 0x78, { "checkfilter" } },
    { 0xFD, { "codegenop" } },
    { 0x80, { "coerce", { Operand::U30 } } },
    { 0x82, { "coerce_a" } },
    { 0x81, { "coerce_b" } },
    { 0x84, { "coerce_d" } },
    { 0x83, { "coerce_i" } },
    { 0x89, { "coerce_o" } },
    { 0x85, { "coerce_s" } },
    { 0x88, { "coerce_u" } },
    { 0x9A, { "concat" } },
    { 0x42, { "construct", { Operand::U30 } } },
    { 0x4A, { "constructprop", { Operand::U30,  Operand::U30 } } },
    { 0x49, { "constructsuper", { Operand::U30 } } },
    { 0x76, { "convert_b" } },
    { 0x75, { "convert_d" } },
    { 0x79, { "convert_f" } },
    { 0x7B, { "convert_f4" } },
    { 0x73, { "convert_i" } },
    { 0x79, { "convert_m" } },
    { 0x7A, { "convert_m_p" } },
    { 0x77, { "convert_o" } },
    { 0x70, { "convert_s" } },
    { 0x74, { "convert_u" } },
    { 0xEF, { "debug", { Operand::Byte, Operand::U30, Operand::Byte, Operand::U30 } } },
    { 0xF1, { "debugfile", { Operand::U30 } } },
    { 0xF0, { "debugline", { Operand::U30 } } },
    { 0x94, { "declocal", { Operand::U30 } } },
    { 0xC3, { "declocal_i", { Operand::U30 } } },
    { 0x9F, { "declocal_p" } },
    { 0xFF, { "decode" } },
    { 0x93, { "decrement" } },
    { 0xC1, { "decrement_i" } },
    { 0x9E, { "decrement_p" } },
    { 0x5B, { "deldescendants" } },
    { 0x6A, { "deleteproperty", { Operand::U30 } } },
    { 0x6B, { "deletepropertylate" } },
    { 0xA3, { "divide" } },
    { 0xB8, { "divide_p" } },
    { 0xFB, { "doubletoatom" } },
    { 0x2A, { "dup" } },
    { 0x06, { "dxns", { Operand::U30 } } },
    { 0x07, { "dxnslate" } },
    { 0xAB, { "equals" } },
    { 0x72, { "esc_xattr" } },
    { 0x71, { "esc_xelem" } },
    { 0x5F, { "finddef", { Operand::U30 } } },
    { 0x5E, { "findproperty", { Operand::U30 } } },
    { 0x5C, { "findpropglobal" } },
    { 0x5D, { "findpropstrict", { Operand::U30 } } },
    { 0x59, { "getdescendants", { Operand::U30 } } },
    { 0x64, { "getglobalscope" } },
    { 0x6E, { "getglobalslot", { Operand::U30 } } },
    { 0x60, { "getlex", { Operand::U30 } } },
    { 0x62, { "getlocal", { Operand::U30 } } },
    { 0xD0, { "getlocal_0" } },
    { 0xD1, { "getlocal_1" } },
    { 0xD2, { "getlocal_2" } },
    { 0xD3, { "getlocal_3" } },
    { 0x67, { "getouterscope", { Operand::U30 } } },
    { 0x66, { "getproperty", { Operand::U30 } } },
    { 0x65, { "getscopeobject", { Operand::U30 } } },
    { 0x6C, { "getslot", { Operand::U30 } } },
    { 0x04, { "getsuper", { Operand::U30 } } },
    { 0xB0, { "greaterequals" } },
    { 0xAF, { "greaterthan" } },
    { 0x1F, { "hasnext" } },
    { 0x32, { "hasnext2", { Operand::U30, Operand::U30 } } },
    { 0x13, { "ifeq", { Operand::S24 } } },
    { 0x12, { "iffalse", { Operand::S24 } } },
    { 0x18, { "ifge", { Operand::S24 }} },
    { 0x17, { "ifgt", { Operand::S24 }} },
    { 0x16, { "ifle", { Operand::S24 }} },
    { 0x15, { "iflt", { Operand::S24 }} },
    { 0x14, { "ifne", { Operand::S24 }} },
    { 0x0F, { "ifnge", { Operand::S24 } } },
    { 0x0E, { "ifngt", { Operand::S24 } } },
    { 0x0D, { "ifnle", { Operand::S24 } } },
    { 0x0C, { "ifnlt", { Operand::S24 } } },
    { 0x19, { "ifstricteq", { Operand::S24 } } },
    { 0x1A, { "ifstrictne", { Operand::S24 } } },
    { 0x11, { "iftrue", { Operand::S24 } } },
    { 0xB4, { "in" } },
    { 0x92, { "inclocal", { Operand::U30 } } },
    { 0xC2, { "inclocal_i",{ Operand::U30 } } },
    { 0x9D, { "inclocal_p" } },
    { 0x91, { "increment" } },
    { 0xC0, { "increment_i" } },
    { 0x9C, { "increment_p" } },
    { 0x68, { "initproperty", { Operand::U30 } } },
    { 0xB1, { "instanceof" } },
    { 0xED, { "invalid" } },
    { 0xB2, { "istype" } },
    { 0xB3, { "istypelate" } },
    { 0x10, { "jump", { Operand::S24 } } },
    { 0x08, { "kill", { Operand::U30 } } },
    { 0x09, { "label" } },
    { 0xAE, { "lessequals" } },
    { 0xAD, { "lessthan" } },
    { 0x38, { "lf32" } },
    { 0x0A, { "lf32x4" } },
    { 0x39, { "lf64" } },
    { 0x36, { "li16" } },
    { 0x37, { "li32" } },
    { 0x35, { "li8" } },
    { 0x1B, { "lookupswitch", { Operand::S24, Operand::Dynamic } } },
    { 0xA5, { "lshift" } },
    { 0xF7, { "mark" } },
    { 0xA4, { "modulo" } },
    { 0xB9, { "modulo_p" } },
    { 0xA2, { "multiply" } },
    { 0xC7, { "multiply_i" } },
    { 0xB7, { "multiply_p" } },
    { 0x90, { "negate" } },
    { 0xC4, { "negate_i" } },
    { 0x8F, { "negate_p" } },
    { 0x57, { "newactivation" } },
    { 0x56, { "newarray", { Operand::U30 }  } },
    { 0x5A, { "newcatch", { Operand::U30 }  } },
    { 0x58, { "newclass", { Operand::U30 }  } },
    { 0x40, { "newfunction", { Operand::U30 } } },
    { 0x55, { "newobject", { Operand::U30 }  } },
    { 0x1E, { "nextname" } },
    { 0x23, { "nextvalue" } },
    { 0x02, { "nop" } },
    { 0x96, { "not" } },
    { 0x29, { "pop" } },
    { 0x1D, { "popscope" } },
    { 0xF9, { "prologue" } },
    //{ 0x22, { "pushconstant",  } },
    { 0x24, { "pushbyte", { Operand::Byte } } },
    { 0x33, { "pushdecimal", { Operand::U30 } } },
    { 0x34, { "pushdnan" } },
    { 0x2F, { "pushdouble", { Operand::U30 } } },
    { 0x27, { "pushfalse" } },
    { 0x22, { "pushfloat", { Operand::U30 }  } },
    { 0x54, { "pushfloat4", { Operand::U30 }  } },
    { 0x2D, { "pushint", { Operand::U30 } } },
    { 0x2E, { "pushuint", { Operand::U30 } } },
    { 0x31, { "pushnamespace", { Operand::U30 } } },
    { 0x28, { "pushnan" } },
    { 0x20, { "pushnull" } },
    { 0x30, { "pushscope" } },
    { 0x25, { "pushshort", { Operand::U30 } } },
    { 0x2C, { "pushstring", { Operand::U30 } } },
    { 0x26, { "pushtrue" } },
    { 0x21, { "pushundefined" } },
    { 0x1C, { "pushwith" } },
    { 0x48, { "returnvalue" } },
    { 0x47, { "returnvoid" } },
    { 0xA6, { "rshift" } },
    { 0xFA, { "sendenter" } },
    { 0x6F, { "setglobalslot", { Operand::U30 } } },
    { 0x63, { "setlocal" , { Operand::U30 } } },
    { 0xD4, { "setlocal_0" } },
    { 0xD5, { "setlocal_1" } },
    { 0xD6, { "setlocal_2" } },
    { 0xD7, { "setlocal_3" } },
    { 0x61, { "setproperty", { Operand::U30 } } },
    { 0x69, { "setpropertylate" } },
    { 0x6D, { "setslot" , { Operand::U30 } } },
    { 0x05, { "setsuper", { Operand::U30 } } },
    { 0x3D, { "sf32" } },
    { 0x0B, { "sf32x4" } },
    { 0x3E, { "sf64" } },
    { 0x3B, { "si16" } },
    { 0x3C, { "si32" } },
    { 0x3A, { "si8" } },
    { 0xAC, { "strictequals" } },
    { 0xA1, { "subtract" } },
    { 0xC6, { "subtract_i" } },
    { 0xB6, { "subtract_p" } },
    { 0x2B, { "swap" } },
    { 0xFC, { "sweep" } },
    { 0x50, { "sxi1" } },
    { 0x52, { "sxi16" } },
    { 0x51, { "sxi8" } },
    { 0x03, { "throw" } },
    { 0xF3, { "timestamp" } },
    { 0x95, { "typeof" } },
    { 0x7A, { "unplus" } },
    { 0xA7, { "urshift" } },
    { 0xFE, { "verifyop" } },
    { 0xF5, { "verifypass" } },
    { 0xF8, { "wb" } }

    };
};


#endif /* INSTRUCTIONS_H */
